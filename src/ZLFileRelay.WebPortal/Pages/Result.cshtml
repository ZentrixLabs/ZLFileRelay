@page
@model ZLFileRelay.WebPortal.Pages.ResultModel
@{
    ViewData["Title"] = "Upload Results";
}

<div class="container mt-5">
    <div class="card shadow">
        <div class="card-header @(Model.AllSuccessful ? "bg-success" : "bg-warning") text-white">
            <h2>
                @if (Model.AllSuccessful)
                {
                    <i class="fa-solid fa-circle-check"></i><text> Upload Successful!</text>
                }
                else
                {
                    <i class="fa-solid fa-triangle-exclamation"></i><text> Upload Completed with Issues</text>
                }
            </h2>
        </div>
        <div class="card-body">
            <div class="alert @(Model.AllSuccessful ? "alert-success" : "alert-warning")">
                <strong>Summary:</strong> @Model.SuccessCount of @Model.TotalCount file@(Model.TotalCount == 1 ? "" : "s") uploaded successfully.
            </div>

            <h5><i class="fa-solid fa-list-check"></i> Upload Details:</h5>
            <div class="list-group mb-3">
                @foreach (var result in Model.Results)
                {
                    <div class="list-group-item @(result.Success ? "list-group-item-success" : "list-group-item-danger")">
                        <div class="d-flex w-100 justify-content-between">
                            <h6 class="mb-1">
                                @if (result.Success)
                                {
                                    <i class="fa-solid fa-circle-check text-success"></i>
                                }
                                else
                                {
                                    <i class="fa-solid fa-circle-xmark text-danger"></i>
                                }
                                @result.FileName
                            </h6>
                            <small class="text-muted">@FormatBytes(result.FileSize)</small>
                        </div>
                        @if (result.Success)
                        {
                            <p class="mb-1">
                                <small class="text-success">
                                    <i class="fa-solid fa-folder"></i> Saved to: @result.FilePath
                                </small>
                            </p>
                            @if (result.RequiresTransfer)
                            {
                                <p class="mb-1 transfer-status" data-filename="@result.FileName">
                                    <small class="text-info">
                                        <i class="fa-solid fa-clock"></i> <span class="status-text">Queued for SCADA transfer...</span>
                                    </small>
                                </p>
                            }
                            else
                            {
                                <p class="mb-1">
                                    <small class="text-muted">
                                        <i class="fa-solid fa-server"></i> Saved to DMZ location (no SCADA transfer)
                                    </small>
                                </p>
                            }
                        }
                        else
                        {
                            <p class="mb-1">
                                <small class="text-danger">
                                    <i class="fa-solid fa-circle-exclamation"></i> Error: @result.ErrorMessage
                                </small>
                            </p>
                        }
                        @if (!string.IsNullOrWhiteSpace(result.Notes))
                        {
                            <p class="mb-0"><small><i class="fa-solid fa-note-sticky"></i> Notes: @result.Notes</small></p>
                        }
                    </div>
                }
            </div>

            <div class="d-grid gap-2">
                <a asp-page="Upload" class="btn btn-primary btn-lg">
                    <i class="fa-solid fa-cloud-arrow-up"></i> Upload More Files
                </a>
                <a asp-page="Index" class="btn btn-outline-secondary">
                    <i class="fa-solid fa-house"></i> Return to Home
                </a>
            </div>
        </div>
        <div class="card-footer text-muted">
            <p class="mb-0">
                <i class="fa-solid fa-user"></i> Uploaded by: <strong>@Model.Username</strong> at @DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")
            </p>
        </div>
    </div>
</div>

@functions {
    private string FormatBytes(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}

@section Scripts {
    <script src="~/lib/signalr/signalr.min.js"></script>
    <script>
        // Connect to SignalR hub for real-time transfer status updates
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/hubs/transferstatus")
            .withAutomaticReconnect()
            .build();

        connection.on("TransferStatusUpdate", function (status) {
            console.log("Transfer status update received:", status);
            updateTransferStatus(status);
        });

        connection.start()
            .then(() => {
                console.log("Connected to transfer status hub");
                
                // Set up timeout warnings for transfers that don't update
                setTimeout(() => {
                    document.querySelectorAll('.transfer-status').forEach(element => {
                        const statusText = element.querySelector('.status-text');
                        if (statusText && statusText.textContent.includes('Queued')) {
                            // Still queued after 2 minutes - show warning
                            const small = element.querySelector('small');
                            const icon = element.querySelector('i');
                            small.className = 'text-warning';
                            icon.className = 'fa-solid fa-clock me-1';
                            statusText.innerHTML = '<span>⚠️ Transfer is taking longer than expected. Check service logs if it continues.</span>';
                        }
                    });
                }, 120000); // 2 minutes
            })
            .catch(err => {
                console.error("Error connecting to hub:", err);
                // Show a note that real-time updates aren't available
                document.querySelectorAll('.transfer-status').forEach(element => {
                    const statusText = element.querySelector('.status-text');
                    if (statusText) {
                        statusText.innerHTML += ' <small class="text-muted">(Real-time updates unavailable)</small>';
                    }
                });
            });

        function updateTransferStatus(status) {
            // Find the status element for this file
            const statusElements = document.querySelectorAll('.transfer-status');
            statusElements.forEach(element => {
                const filename = element.getAttribute('data-filename');
                
                // Check if this status update matches this file
                if (status.fileName === filename) {
                    const statusText = element.querySelector('.status-text');
                    const icon = element.querySelector('i');
                    const small = element.querySelector('small');
                    
                    // Update based on status
                    switch (status.status) {
                        case 0: // Queued
                            icon.className = 'fa-solid fa-clock';
                            small.className = 'text-info';
                            statusText.textContent = 'Queued for SCADA transfer...';
                            break;
                        case 1: // Transferring
                            icon.className = 'fa-solid fa-spinner fa-spin';
                            small.className = 'text-primary';
                            statusText.textContent = 'Transferring to SCADA...';
                            break;
                        case 2: // Completed
                            icon.className = 'fa-solid fa-circle-check';
                            small.className = 'text-success';
                            let destText = status.destinationPath || 'SCADA system';
                            statusText.textContent = `✓ SCADA transfer completed: ${destText}`;
                            
                            // Optional: Add a subtle notification sound or visual effect
                            element.classList.add('animate__animated', 'animate__pulse');
                            break;
                        case 3: // Failed
                            icon.className = 'fa-solid fa-circle-xmark';
                            small.className = 'text-danger';
                            let errorMsg = status.errorMessage || 'Unknown error occurred during transfer';
                            
                            // Format error message for display (handle newlines)
                            const formattedError = errorMsg.replace(/\\n/g, '\n').trim();
                            
                            // Create a more visible error display
                            statusText.innerHTML = '';
                            const errorIcon = document.createElement('i');
                            errorIcon.className = 'fa-solid fa-triangle-exclamation me-1';
                            statusText.appendChild(errorIcon);
                            
                            const errorText = document.createElement('span');
                            // Show first line or truncate if too long
                            const firstLine = formattedError.split('\n')[0];
                            if (firstLine.length > 150) {
                                errorText.textContent = firstLine.substring(0, 150) + '...';
                                errorText.title = formattedError; // Full error in tooltip
                            } else {
                                errorText.textContent = firstLine;
                                if (formattedError.includes('\n')) {
                                    errorText.title = formattedError; // Show full multiline error in tooltip
                                }
                            }
                            statusText.appendChild(errorText);

                            // Details container (hidden by default)
                            const details = document.createElement('pre');
                            details.className = 'error-details d-none mt-2 mb-0 p-2 bg-light border rounded';
                            details.style.whiteSpace = 'pre-wrap';
                            details.textContent = formattedError;
                            statusText.appendChild(details);

                            // Action buttons: Show details / Copy error
                            const actions = document.createElement('div');
                            actions.className = 'mt-2';

                            const toggleBtn = document.createElement('button');
                            toggleBtn.type = 'button';
                            toggleBtn.className = 'btn btn-sm btn-outline-secondary me-2';
                            toggleBtn.textContent = 'Show details';
                            toggleBtn.addEventListener('click', () => {
                                const hidden = details.classList.contains('d-none');
                                if (hidden) {
                                    details.classList.remove('d-none');
                                    toggleBtn.textContent = 'Hide details';
                                } else {
                                    details.classList.add('d-none');
                                    toggleBtn.textContent = 'Show details';
                                }
                            });

                            const copyBtn = document.createElement('button');
                            copyBtn.type = 'button';
                            copyBtn.className = 'btn btn-sm btn-outline-primary';
                            copyBtn.textContent = 'Copy error';
                            copyBtn.addEventListener('click', async () => {
                                try {
                                    await navigator.clipboard.writeText(formattedError);
                                    copyBtn.textContent = 'Copied!';
                                    setTimeout(() => copyBtn.textContent = 'Copy error', 1500);
                                } catch (e) {
                                    copyBtn.textContent = 'Copy failed';
                                    setTimeout(() => copyBtn.textContent = 'Copy error', 1500);
                                }
                            });

                            actions.appendChild(toggleBtn);
                            actions.appendChild(copyBtn);
                            statusText.appendChild(actions);

                            // Make the parent element more prominent
                            element.closest('.list-group-item').classList.add('border-danger', 'border-2');
                            
                            // Scroll error into view
                            element.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                            break;
                    }
                }
            });
        }

        // Clean up connection when page unloads
        window.addEventListener('beforeunload', function () {
            connection.stop();
        });
    </script>
    
    <style>
        .transfer-status {
            transition: all 0.3s ease;
        }
        
        .animate__animated {
            animation-duration: 1s;
        }
        
        .animate__pulse {
            animation-name: pulse;
        }
        
        @@keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
    </style>
}

